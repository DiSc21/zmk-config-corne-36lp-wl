/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* std includes */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* led and mouse includes */
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/pointing.h>

/* urobs num word */
#include <behaviors/num_word.dtsi>


/* TOP LEFT hand keys */
#define LT0 0
#define LT1 1
#define LT2 2
#define LT3 3
#define LT4 4
#define LT5 5
/* TOP RIGHT hand keys */
#define RT0 6
#define RT1 7
#define RT2 8
#define RT3 9
#define RT4 10
#define RT5 11

/* MID LEFT hand keys */
#define LM0 12
#define LM1 13
#define LM2 14
#define LM3 15
#define LM4 16
#define LM5 17
/* MID RIGHT hand keys */
#define RM0 18
#define RM1 19
#define RM2 20
#define RM3 21
#define RM4 22
#define RM5 23

/* MID LEFT hand keys */
#define LB0 24
#define LB1 25
#define LB2 26
#define LB3 27
#define LB4 28
#define LB5 29
/* MID RIGHT hand keys */
#define RB0 30
#define RB1 31
#define RB2 32
#define RB3 33
#define RB4 34
#define RB5 35

/* THUMBS LEFT */
#define LH2 36
#define LH1 37
#define LH0 38
/* THUMBS RIGHT */
#define RH0 39
#define RH1 40
#define RH2 41

// left-hand keys
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
// right-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
// thumb keys
#define KEYS_THUMBS LH2 LH1 LH0 RH0 RH1 RH2

/* Layer defs */
#define L_DEF 0
#define L_NUM 1
#define L_BRC 2
#define L_NAV 3
#define L_LED 4
#define L_BT 5

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

#define LAYER_QUICK_TAP_MS 175

#define COMBO_TAPPING_TIME 50
#define COMBO_TAPPING_TIME_FAST 35

&led_strip {
    chain-length = <24>;
};

/ {

//  Combo Keys All Layers ATM:
//  --------------------------
//  ___________________________________________           ___________________________________________
// |   |     __|__   __|__   __|__     |       |#########|       |     __|__   __|__   __|__     |   |
// | - |    |_ESC_| |__A__| |__T__|    |   -----StickyBT------   |    |__Y__| |_BSP_| |_To0_|    | - |
// |___|_______|_______|_______|_______|_______|#########|_______|_______|_______|_______|_______|___|
// |   |     __|__   __|__   __|__     |       |#########|       |     _____   _____   _____     |   |
// | - |    |-CAP-| |-NTE-| |_INS_|    |   -----StickyLed-----   |    |__-__| |__=__| |__'__|    | - |
// |___|_______|_______|_______|_______|_______|#########|_______|_______|_______|_______|_______|___|
// |   |     __|__   __|__   __|__     |       |#########|       |     __|__   __|__   __|__     |   |
// | - |    |_HOM_| |_END_| |_ToN_|    |       |#########|       |    |__N__| |__,__| |__\__|    | - |
// |___|_______|_______|_______|_______|_______|#########|_______|_______|_______|_______|_______|___|
//                     |       |       |       |#########|       |       |       |
//                     |_______|_______|_______|#########|_______|_______|_______|
    combos {
        compatible = "zmk,combos";

        // CrossSide Combos
        // ----------------
        combo_sticky_bt {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LT5 RT0>;
            bindings = <&sl L_BT>;
        };
        combo_to_navigation {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LM5 RM0>;
            bindings = <&to L_NAV>;
        };
        combo_sticky_led {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LB5 RB0>;
            bindings = <&sl L_LED>;
        };
        // TopRow Combos
        // -------------
        combo_esc {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LT1 LT2>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LT2 LT3>;
            bindings = <&kp TAB>;
        };
        combo_key_t {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LT3 LT4>;
            bindings = <&kp T>;
        };
        combo_key_y {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RT1 RT2>;
            bindings = <&kp Y>;
        };
        combo_bspc {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RT2 RT3>;
            bindings = <&kp BSPC>;
        };
        combo_to_default {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RT3 RT4>;
            bindings = <&to L_DEF>;
        };

        // MiddleRow Combos
        // ----------------
        combo_caps_word {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LM1 LM2>;
            bindings = <&caps_word>;
        };
        combo_space {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LM2 LM3>;
            bindings = <&kp SPACE>;
        };
        combo_insert {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LM3 LM4>;
            bindings = <&kp INSERT>;
        };
        combo_minus {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RM1 RM2>;
            bindings = <&kp MINUS>;
        };
        combo_equal {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RM2 RM3>;
            bindings = <&kp EQUAL>;
        };
        combo_quote {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RM3 RM4>;
            bindings = <&kp SINGLE_QUOTE>;
        };

        // BottomRow Combos
        // ----------------
        combo_home {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LB1 LB2>;
            bindings = <&kp HOME>;
        };
        combo_end {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LB2 LB3>;
            bindings = <&kp END>;
        };
        combo_to_numbers {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <LB3 LB4>;
            bindings = <&to L_NUM>;
        };
        combo_comma {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RB1 RB2>;
            bindings = <&kp COMMA>;
        };
        combo_dot {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RB2 RB3>;
            bindings = <&kp DOT>;
        };
        combo_bslh {
            timeout-ms = <COMBO_TAPPING_TIME_FAST>;
            key-positions = <RB3 RB4>;
            bindings = <&kp BSLH>;
        };
    };

    macros {
        key_space: key_space {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>, <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_tap &kp SPACE>
                ;
        };
        key_space_sticky_shift: key_space_sticky_shift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>, <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_tap &kp SPACE &sk LSHIFT>
                ;
        };

        /**
         * Layer + underglow color
         * Triggers a different underglow when the macro is pressed, and when it is released,
         * we use the macro "press" activation mode whenever triggering the &rgb_ug behavior:
         *
         * Param: Layer to switch to
         *
         * Example:
         *  `&led_red NUM_LAYER`
         */
        led_red: led_red {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>, <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(0,100,100)>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>, <&macro_release &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(0,20,5)>;
        };

        led_green: led_green {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>, <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(120,100,100)>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>, <&macro_release &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(0,20,5)>;
        };

        led_blue: led_blue {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>, <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(210,100,100)>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>, <&macro_release &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(0,20,5)>;
        };

        led_purple: led_purple {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>, <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(270,100,100)>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>, <&macro_release &mo MACRO_PLACEHOLDER>
                , <&macro_tap &rgb_ug RGB_COLOR_HSB(0,20,5)>;
        };
    };

    behaviors {
        /*
         * CTRL-Tapdance Character Additions
         * ---------------------------------
         *
         * Enable tabledance if ctrl modifier is active
         *
         * Mod-Morphs for common completions, i.e.
         * - add space to ,.!?;:
         * - add space+shift to .;!?
         * - t -> th/Th/the/The
         */
        morph_ctrl_shift_dot: morph_ctrl_shift_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&key_space DOT>, <&key_space_sticky_shift DOT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        tdm_ctrl_dot: tdm_ctrl_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&morph_ctrl_shift_dot>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        td_ctrl_dot: td_ctrl_dot {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp DOT>, <&tdm_ctrl_dot>;
        };
        td_test: td_test {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp DOT>, <&key_space_sticky_shift DOT>;
        };
        td_free_test: td_free_test {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp H>, <&key_space_sticky_shift DOT>;
        };


        lt_rl: lt_rl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&led_red>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_THUMBS>;
            hold-trigger-on-release;
        };
        lt_rr: lt_rr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&led_red>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_THUMBS>;
            hold-trigger-on-release;
        };

        lt_bl: lt_bl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&led_blue>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_THUMBS>;
            hold-trigger-on-release;
        };
        lt_br: lt_br {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&led_blue>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_THUMBS>;
            hold-trigger-on-release;
        };

        lt_pl: lt_pl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&led_purple>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_THUMBS>;
            hold-trigger-on-release;
        };
        lt_pr: lt_pr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&led_purple>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_THUMBS>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.
        //
        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_THUMBS>;
            hold-trigger-on-release;
        };
        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_THUMBS>;
            hold-trigger-on-release;
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_THUMBS>;
            // hold-trigger-on-release;
        };
        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <LAYER_QUICK_TAP_MS>; // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_THUMBS>;
            // hold-trigger-on-release;
        };

        // Non-Positional Homerow Mods
        // Used for &mm_grescm_gui behavior on left hand.
        //
        // Usage: &hm LSHFT T
        // Tap: T
        // Tap-Tap-Hold: Repeat T
        // Hold: LSHIFT
        hm_np: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        // STD ZMK DOC Homerow Mods
        hm: homerow_mods_zmk_doc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        pht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1>;    // <---[[the W key]]
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // The Base Layer
        // ---------------------------------------------------------------------------------------------------------------------------------------------------
        // | - |  Q         |  W        | E          | R         || T         | |   -   | | Y         || U         | I          | O         | P           | - |
        // |---|------------|-----------|------------|-----------||-----------| |   -   | |-----------||-----------|------------|-----------|-------------|---|
        // | - |  A [SHIFT] |  S [CTRL] | D [WIN]    | F [ALT]   || G         | |   -   | | H         || J [ALT]   | K [WIN]    | L [CTRL]  | ;/: [SHIFT] | - |
        // |---|------------|-----------|------------|-----------||-----------| |   -   | |-----------||-----------|------------|-----------|-------------|---|
        // | - |  Z         |  X        | C          | V         || B         | |   -   | | N         || M         | ,/<        | ./>       | //?         | - |
        // -----------------------------|------------|-----------||-----------| |   -   | |-----------||-----------|------------|------------------------------
        //                              | BSPC [NAV] | RET [BRC] || TAB [NUM] | |   -   | | ESC [NUM] || SPC [BRC] | ENTF [NAV] |
        //                              -----------------------------------------------------------------------------------------
        default {
            display-name = "default";
            bindings = <
                &none &kp Q                &kp W         &kp E             &kp R            &kp T                &kp Y            &kp U              &kp I            &kp O         &kp P                   &none
                &none &hm_shift_l LSHIFT A &hm_l LCTRL S &hm_l LGUI D      &hm_l LALT F     &kp G                &kp H            &hm_r RALT J       &hm_r RGUI K     &hm_r RCTRL L &hm_shift_r RSHIFT SEMI &none
                &none &kp Z                &kp X         &kp C             &kp V            &kp B                &kp N            &kp M              &kp COMMA        &td_ctrl_dot  &kp FSLH                &none
                                                         &lt_rl L_NAV BSPC &lt_bl L_BRC RET &lt_pl L_NUM TAB     &lt_pr L_NUM ESC &lt_br L_BRC SPACE &lt_rr L_NAV DEL
            >;
        };

        // [NUM] LAYER
        // -----------------------------------------------------------------------------------------------------------------------------------------
        // | - | F1         | F2        | F3       | F4       || Euler   |  |    -    |  | +       || 7       | 8       | 9        | *         | - |
        // |---|------------|-----------|----------|----------||---------|  |    -    |  |---------||---------|---------|----------|-----------|---|
        // | - | F5 [SHIFT] | F6 [CTRL] | F7 [WIN] | F8 [ALT] || PI      |  |    -    |  | 0       || 4 [ALT] | 5 [WIN] | 6 [CTRL] | = [SHIFT] | - |
        // |---|------------|-----------|----------|----------||---------|  |    -    |  |---------||---------|---------|----------|-----------|---|
        // | - | F9         | F10       | F11      | F12      || Sqrt2   |  |    -    |  | -       || 1       | 2       | 3        | .         | - |
        // -----------------------------|----------|----------||---------|  |    -    |  |---------||---------|---------|---------------------------
        //                              | BSPC     | RET      || **TAB** |  |    -    |  | **ESC** || SPC     | ENTF    |
        //                              ---------------------------------------------------------------------------------
        numbers {
            display-name = "numbers";
            bindings = <
                &none &kp F1                &kp F2         &kp   F3      &kp F4        &trans         &trans &kp N7        &kp N8        &kp N9         &kp ASTERISK             &none
                &none &hm_shift_l LSHIFT F5 &hm_l LCTRL F6 &hm_l LGUI F7 &hm_l LALT F8 &trans         &kp N0 &hm_r RALT N4 &hm_r RGUI N5 &hm_r RCTRL N6 &hm_shift_r RSHIFT EQUAL &none
                &none &kp F9                &kp F10        &kp   F11     &kp F12       &trans         &trans &kp N1        &kp N2        &kp N3         &kp FSLH                 &none
                                                           &trans        &trans        &trans         &trans &trans        &trans
            >;
        };

        // [BRC] LAYER (BRACES/SIGNS)
        // -----------------------------------------------------------------------------------------------------------------------------------------
        // | - | !         | @        | #       | $         | %         ||   |    -    |   | ^    || &       | *       | (         | )         | - |
        // |---|-----------|----------|---------|-----------|-----------||   |    -    |   |------||---------|---------|-----------|-----------|---|
        // | - | ~ [SHIFT] | ` [CTRL] |   [WIN] |     [ALT] | P-UP      ||   |    -    |   | '/"  || { [ALT] | [ [WIN] | ] [CTRL]  | } [SHIFT] | - |
        // |---|-----------|----------|---------|-----------|-----------||   |    -    |   |------||---------|---------|-----------|-----------|---|
        // | - | HOME      | INSERT   | PRINT   | END       | P-DOWN    ||   |    -    |   | -/_  || \/|     | <       | >         | //?       | - |
        // ---------------------------|---------|-----------|-----------||   |    -    |   |------||---------|---------|----------------------------
        //                            | BSPC    | **RET**   | TAB       ||   |    -    |   | ESC  || **SPC** | ENTF    |
        //                            ----------------------------------------------------------------------------------
        signs {
            display-name = "signs";
            bindings = <
                &none &kp EXCL                 &kp AT            &kp HASH         &kp DOLLAR &trans       &trans &kp AMPS        &kp ASTERISK    &kp LPAR         &kp RPAR                &none
                &none &hm_shift_l LSHIFT TILDE &hm_l LCTRL GRAVE &kp SINGLE_QUOTE &kp PRCNT  &trans       &trans &hm_r RALT LBRC &hm_r RGUI LBKT &hm_r RCTRL RBKT &hm_shift_r RSHIFT RBRC &none
                &none &kp CARET                &kp INSERT        &kp PSCRN        &kp QMARK  &trans       &trans &kp BSLH        &kp LT          &kp GT           &kp FSLH                &none
                                                                 &trans           &trans     &trans       &trans &trans          &trans
            >;
        };

        // [NAV] LAYER
        // ----------------------------------------------------------------------------------------------------------------------------------------------------
        // | - |            |           |          |          ||         |  |    -    |  | M-Scroll-L || M-LCKL     | M-MIDDLE   | M-Scroll-R | P-UP       | - |
        // |---|------------|-----------|----------|----------||---------|  |    -    |  |------------||------------|------------|------------|------------|---|
        // | - |    [SHIFT] | M2 [CTRL] | M3 [WIN] | M1 [ALT] || M-DBL   |  |    -    |  | <-         || DOWN       | UP         | ->         | M-RCKL     | - |
        // |---|------------|-----------|----------|----------||---------|  |    -    |  |------------||------------|------------|------------|------------|---|
        // | - |            |           |          |          ||         |  |    -    |  | <-MOUSE    || M-DOWN     | M-UP       | ->MOUSE    | P-DOWN     | - |
        // -----------------------------|----------|----------||---------|  |    -    |  |------------||------------|------------|------------------------------
        //                              | **BSPC** | RET      || TAB     |  |    -    |  | ESC        || SPC        | **ENTF**   |
        //                              ------------------------------------------------------------------------------------------
        navigation {
            display-name = "navigation";
            bindings = <
                &none &msc SCRL_UP   &mkp RCLK      &mmv MOVE_UP   &mkp LCLK       &trans             &trans   &mkp LCLK &mkp MCLK &mkp RCLK &kp PG_UP &none
                &none &msc SCRL_LEFT &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &msc SCRL_RIGHT    &kp LEFT &kp DOWN  &kp  UP   &kp RIGHT &trans    &none
                &none &msc SCRL_DOWN &trans         &mkp MCLK      &trans          &trans             &trans   &trans    &trans    &trans    &kp PG_DN &none
                                                    &trans         &trans          &trans             &trans   &trans    &trans
            >;
        };

        // [LED] LAYER
        // ---------------------------------------------------------------------------------------------------------------------------------------------
        // | - | TOGGLE     | HUE++     | Sat++    | Light++  | Clr 1   |  |    -    |  |         |          |            |           |            | - |
        // |---|------------|-----------|----------|----------|---------|  |    -    |  |---------|----------|------------|-----------|------------|---|
        // | - | Previous   | Slower    | Faster   | Next     | Clr 2   |  |    -    |  |         |          |            |           |            | - |
        // |---|------------|-----------|----------|----------|---------|  |    -    |  |---------|----------|------------|-----------|------------|---|
        // | - |            | HUE--     | Sat--    | Light--  | Clr 3   |  |    -    |  |         |          |            |           |            | - |
        // -----------------------------|----------|----------|---------|  |    -    |  |---------|----------|------------|-----------------------------
        //                              |          |          |         |  |    -    |  |         |          |            |
        //                              -----------------------------------------------------------------------------------
        lighting {
            display-name = "lighting";
            bindings = <
                &none &rgb_ug RGB_TOG &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_COLOR_HSB(25,100,0)   &none &none &none &none &none &none
                &none &rgb_ug RGB_EFR &rgb_ug RGB_SPD &rgb_ug RGB_SPI &rgb_ug RGB_EFF &rgb_ug RGB_COLOR_HSB(25,100,80)  &none &none &none &none &none &none
                &none &none           &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_COLOR_HSB(25,0,100)   &none &none &none &none &none &none
                                                      &none           &none           &none                             &none &none &none
            >;
        };

        // [BT] LAYER
        // ---------------------------------------------------------------------------------------------------------------------------------------------
        // | - | BTCLR      |           |          |          |         |  |    -    |  |         |          |            |           |            | - |
        // |---|------------|-----------|----------|----------|---------|  |    -    |  |---------|----------|------------|-----------|------------|---|
        // | - | B1         | B2        | B3       | B4       | B5      |  |    -    |  |         |          |            |           |            | - |
        // |---|------------|-----------|----------|----------|---------|  |    -    |  |---------|----------|------------|-----------|------------|---|
        // | - |            |           |          |          |         |  |    -    |  |         |          |            |           |            | - |
        // -----------------------------|----------|----------|---------|  |    -    |  |---------|----------|------------|-----------------------------
        //                              |          |          |         |  |    -    |  |         |          |            |
        //                              -----------------------------------------------------------------------------------
        bluetooth {
            display-name = "bluetooth";
            bindings = <
                &none &bt BT_CLR   &to L_DEF    &to L_DEF    &to L_DEF    &to L_DEF     &to L_DEF &to L_DEF &to L_DEF  &to L_DEF &to L_DEF &none
                &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &to L_DEF &to L_DEF &to L_DEF  &to L_DEF &to L_DEF &none
                &none &to L_DEF    &to L_DEF    &to L_DEF    &to L_DEF    &to L_DEF     &to L_DEF &to L_DEF &to L_DEF  &to L_DEF &to L_DEF &none
                                                &to L_DEF    &to L_DEF    &to L_DEF     &to L_DEF &to L_DEF &to L_DEF
                        >;
                };


//   //// -----------------------------------------------------------------------------------------
//   //// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
//   //// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
//   //// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//   ////                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
//   //                old_default {
//   //                        bindings = <
//   //   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
//   //   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
//   //   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
//   //                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
//   //                        >;
//   //                };
//
//                   lower_layer {
//   // -----------------------------------------------------------------------------------------
//   // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
//   // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
//   // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//   //                    | GUI |     | SPC |   | ENT |     | ALT |
//                           bindings = <
//      &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
//      &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
//      &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
//                                       &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
//                           >;
//                   };
//
//   //                raise_layer {
//   //// -----------------------------------------------------------------------------------------
//   //// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
//   //// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
//   //// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//   ////                    | GUI |     | SPC |   | ENT |     | ALT |
//   //                        bindings = <
//   //   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
//   //   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
//   //   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
//   //                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
//   //                        >;
//   //                };
//   //

        };
};

// -------------------------------------------------------------------------------------------------------------------------------------
// [L1] ARROWS LAYER
// [NUM] RGB LED LAYER
// [BRACE] BRACE/SIGNS LAYER
// [BTL] BLUETOOTH LAYER
//------------------------
// [L2] SYBEL LAYER

