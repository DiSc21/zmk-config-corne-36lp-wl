/*
╭──────────────────────────────────────────────────────────╮
│ @Author:  TheDirkKnight     @Contact:  github.com/DiSc21 │
│ @License: MIT             @copyright: 2024 TheDirkKnight │
│ @Data:    2025/01/04                                     │
╰──────────────────────────────────────────────────────────╯
 ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡆⠀⠀⠀⠀⠀⠀⠀⣆              ⠀⠀⠀⣶⡀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⣿⡇               ⣼⣿⣧
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⡿⣿             ⠀⣰⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠃⣿⡄           ⠀⢠⣿⣿⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣼⣿⡇           ⣰⣿⣿⣿⣿⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿           ⣰⣿⣿⣿⠋⠉⠙⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣼⣿⣿⣿⣿⣿⣿⣿⣿⡏          ⣰⣿⣿⣿⡇⠀⠀⠀⢸⣿⣿⣟⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⡻⢿⣿⡿⡟⣿⡿⠟⣛⠁        ⠀⣴⣿⠿⠛⠋⠁⠀⠀⠀⠈⠙⠛⠿⣿⣦
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⡾⠛⠉⠀⠀⠀⠉⠓⠂ ⡀⠀⠐⠛⠁⠀⠀⠀⣸⣿⣦⣄⡀⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁
⠀⠀⠀⠀⠀⠀⢀⣀⣀⣤⣤⣶⣿⣿⣿⣿⣿⣷⣆⠀⠀⠀⠀⠀⠀⢠⡇⠀⠀⠀⠀⠀⠀⠀⠈⣻⣿⣿⣿⣷⣶⣤⣤⣤⣄⣀
⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀ ⣀⣀  ⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡄
⠀⠀⡾⣿⣿⣿⣿⠿⠋⢁⣿⣿⣿⣿⣿⣿⣟⣥⣶⢿⡛⠉⠀⠀⠈⠀⠀⠁⠀⠀⠀⠈⢙⡻⢷⣿⣿⣿⣿⣿⣿⣿⡟⠿⠿⣿⣿⣿⣿
⠀⠀⠀⣿⣿⠟⠁⠀⢠⣿⣿⣿⣿⣿⣿⡿⢟⣭⣶⣿⣷⣄⠀⠀⠀⣄⣀⡄⠀⠀⢀⣴⣿⣿⣷⣝⡻⣿⣿⣿⣿⣿⣿⣦⡀⠀⠉⠛⢿
⠀⠀⠀⠿⠁⠀⠀⠀⠋⠁⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣮⡻⣿⣿⣿⠯⠉⠙
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠁⠽⠋⠠⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠷⠌⠻⠟
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠿⠿⠿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠟⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠋
╭──────────────────────────────────────────────────────────╮
│ @brief: ZMK devicetree file for led-layer-indicators.    │
│                                                          │
│ @depends: shared_defs.dtsi for key positions.            │
╰──────────────────────────────────────────────────────────╯
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "shared_defs.dtsi"
#include "shared_macros.dtsi"


#define CREATE_MOD_MORPH(name, raw_binding, mod_binding, mod_mods) \
    /omit-if-no-ref/ name: name { \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <raw_binding>, <mod_binding>; \
        mods = <mod_mods>; \
    }; \



#define CREATE_MULTI_MOD_MORPH_MACRO(name, mmb_bind, mmc_bind, mmg_bind, mmcg_bind) \
    / { \
        macros { \
            NO_PARAM_SANDWICH(mmb_ ## name,  &none, mmb_bind,  &none) \
            NO_PARAM_SANDWICH(mmc_ ## name,  &none, mmc_bind,  &none) \
            NO_PARAM_SANDWICH(mmg_ ## name,  &none, mmg_bind,  &none) \
            NO_PARAM_SANDWICH(mmcg_ ## name, &none, mmcg_bind, &none) \
        }; \
        behaviors { \
            CREATE_MOD_MORPH(mcg_ ## name, &mmc_ ## name, &mmcg_ ## name, GUI) \
            CREATE_MOD_MORPH(mg_ ## name,  &mmb_ ## name, &mmg_ ## name,  GUI) \
            CREATE_MOD_MORPH(mc_ ## name,  &mg_ ## name,  &mcg_ ## name,  CTL) \
        }; \
    }; \
    / { \
        macros { \
            NO_PARAM_SANDWICH(mod_space_ ## name,      &none,      &mc_ ## name, &kp SPACE) \
            NO_PARAM_SANDWICH(mod_caps_ ## name,       &sk LSHIFT, &mc_ ## name, &none) \
            NO_PARAM_SANDWICH(mod_caps_space_ ## name, &sk LSHIFT, &mc_ ## name, &kp SPACE) \
        } \
        behaviors { \
            CREATE_MOD_MORPH(mas_ ## name,  &mod_space_ ## name, &mod_caps_space_ ## name, SFT) \
            CREATE_MOD_MORPH(ms_ ## name,   &mc_ ## name,        &mod_caps_ ## name,       SFT) \
            CREATE_MOD_MORPH(mumo_ ## name, &ms_ ## name,        &mas_ ## name,            ALT) \
        }; \
    }; \

//CREATE_MULTI_MOD_MORPH_MACRO(th, &kp T &kp H, &kp T &kp H &kp E, &kp T &kp E &kp R, &kp T &kp H &kp A &kp T)

//CREATE_MULTI_MOD_MORPH_MACRO(at, &kp A &kp T, &kp A &kp R &kp E, &kp A &kp V &kp E, &kp A &kp N &kp G &kp T)
//CREATE_MULTI_MOD_MORPH_MACRO(er, &kp E &kp T, &kp E &kp R &kp E, &kp E &kp V &kp E, &kp E &kp N &kp G &kp T)
//CREATE_MULTI_MOD_MORPH_MACRO(is, &kp I &kp T, &kp I &kp R &kp E, &kp I &kp V &kp E, &kp I &kp N &kp G &kp T)
//CREATE_MULTI_MOD_MORPH_MACRO(or, &kp O &kp T, &kp O &kp R &kp E, &kp O &kp V &kp E, &kp O &kp N &kp G &kp T)
//CREATE_MULTI_MOD_MORPH_MACRO(ur, &kp U &kp T, &kp U &kp R &kp E, &kp U &kp V &kp E, &kp U &kp N &kp G &kp T)

/ {
    macros {
        NO_PARAM_SANDWICH(nopasa_th, &none, &kp T &kp H, &none)
    };
};

#define MODS_LR_ALT <(MOD_LALT|MOD_RALT)>

/ {
    behaviors {
        CREATE_MOD_MORPH(mumo_th, &none, &nopasa_th, MODS_LR_ALT)
    };
};


/////
///// @brief auxiliary macro for the creation of ctrl-tapdances.
/////
///// @param td_name: name of the created tabdance, use '&td_name' in keymap
///// @param mm_name: name of the created ctrl-mod-morph sent in case of of a positiv tabdance
///// @param td_binding: must be '&'+param mm_name; aux cause I'm too stupid for macro concatenation
///// @param tap_binding: the key behavior bound to key-taps
///// @param morph_binding: the morph behavior bound to tapdances
/////
//#define CREATE_NESTED_MOD_MORPH(td_name, mm_name, td_binding, tap_binding, morph_binding) \
//    /omit-if-no-ref/ mm_name: mm_name { \
//        compatible = "zmk,behavior-mod-morph"; \
//        #binding-cells = <0>; \
//        bindings = <tap_binding>, <morph_binding>; \
//        mods = <(MOD_LCTL|MOD_RCTL)>; \
//    }; \
//    /omit-if-no-ref/ td_name: td_name { \
//        compatible = "zmk,behavior-tap-dance"; \
//        #binding-cells = <0>; \
//        tapping-term-ms = <TABDANCE_TERM_MS>; \
//        bindings = <tap_binding>, <td_binding>; \
//    };
//
