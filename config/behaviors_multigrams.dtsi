/*
╭──────────────────────────────────────────────────────────╮
│ @Author:  TheDirkKnight     @Contact:  github.com/DiSc21 │
│ @License: MIT             @copyright: 2024 TheDirkKnight │
│ @Data:    2025/01/04                                     │
╰──────────────────────────────────────────────────────────╯
 ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡆⠀⠀⠀⠀⠀⠀⠀⣆              ⠀⠀⠀⣶⡀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⣿⡇               ⣼⣿⣧
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⡿⣿             ⠀⣰⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠃⣿⡄           ⠀⢠⣿⣿⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣼⣿⡇           ⣰⣿⣿⣿⣿⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿           ⣰⣿⣿⣿⠋⠉⠙⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣼⣿⣿⣿⣿⣿⣿⣿⣿⡏          ⣰⣿⣿⣿⡇⠀⠀⠀⢸⣿⣿⣟⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⡻⢿⣿⡿⡟⣿⡿⠟⣛⠁        ⠀⣴⣿⠿⠛⠋⠁⠀⠀⠀⠈⠙⠛⠿⣿⣦
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⡾⠛⠉⠀⠀⠀⠉⠓⠂ ⡀⠀⠐⠛⠁⠀⠀⠀⣸⣿⣦⣄⡀⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁
⠀⠀⠀⠀⠀⠀⢀⣀⣀⣤⣤⣶⣿⣿⣿⣿⣿⣷⣆⠀⠀⠀⠀⠀⠀⢠⡇⠀⠀⠀⠀⠀⠀⠀⠈⣻⣿⣿⣿⣷⣶⣤⣤⣤⣄⣀
⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀ ⣀⣀  ⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡄
⠀⠀⡾⣿⣿⣿⣿⠿⠋⢁⣿⣿⣿⣿⣿⣿⣟⣥⣶⢿⡛⠉⠀⠀⠈⠀⠀⠁⠀⠀⠀⠈⢙⡻⢷⣿⣿⣿⣿⣿⣿⣿⡟⠿⠿⣿⣿⣿⣿
⠀⠀⠀⣿⣿⠟⠁⠀⢠⣿⣿⣿⣿⣿⣿⡿⢟⣭⣶⣿⣷⣄⠀⠀⠀⣄⣀⡄⠀⠀⢀⣴⣿⣿⣷⣝⡻⣿⣿⣿⣿⣿⣿⣦⡀⠀⠉⠛⢿
⠀⠀⠀⠿⠁⠀⠀⠀⠋⠁⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣮⡻⣿⣿⣿⠯⠉⠙
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠁⠽⠋⠠⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠷⠌⠻⠟
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠿⠿⠿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠟⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠋
╭──────────────────────────────────────────────────────────╮
│ @brief: ZMK devicetree file for led-layer-indicators.    │
│                                                          │
│ @depends:                                                │
│ - shared_defs.dtsi (key positions)                       │
│ - shared_macros.dtsi (some aux macros).                  │
╰──────────────────────────────────────────────────────────╯
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "shared_defs.dtsi"
#include "shared_macros.dtsi"
#include "shared_nomod_morphs.dtsi"

#define DELAYED_MACRO_WAIT_MS 110

/ {
    macros {
        ///
        /// @brief single param macro with artificial delay for use in multi-key macros
        ///
        /// @note when using &kp in multikey macros after an other multikey macro it is usually
        /// queued in before the last key of the inner multikey macro. This behavior adds an
        /// artificial delay (max-number of inner macro keys times wait-ms) to prevent tap disorder.
        ///
        kpds: kpds {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <DELAYED_MACRO_WAIT_MS>;
            tap-ms = <30>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>
                     , <&macro_tap &kp MACRO_PLACEHOLDER>
                     ;
        };
    };
};


///
/// @brief macro for the creation of nested mod-morphes
///
/// @param name: postfix of the created mod-morph
/// @param first_key:   first key prepended to all bindings if SHIFT modifier not active
/// @param first_key_c: first key prepended to all bindings if SHIFT modifier is active
/// @param mmb_bind: unmodified base binding
/// @param mmc_bind: CTRL binding
/// @param mmg_bind: GUI binding
/// @param mmcg_bind: combined CTRL+GUI binding
/// @param mma_bind: ALT binding
/// @param mmac_bind: ALT+CTRL binding
/// @param mmag_bind: ALT+GUI binding
/// @param mmacg_bind: combined ALT+CTRL+GUI binding
///
/// @note this macro creates a two-dimensional nested multi-mod-morph.
/// ALT+SHIFT modify the bindings by appending space (ALT) and caps first letter (SHIFT)
/// GUI+CTRL alternate the base binding defined by params mmb/mmc/mmg/mmcg_bind
///
/// @usage 'mumo_##name' for multigram-mod-morph only, i.e. without tapdance-space-append
/// @usage 'td_mm_##name' for multigram-mod-morph with tapdance-space-append
///
#define CREATE_MULTI_MOD_MORPH_MACRO(name, first_key, first_key_c, mmb_bind, mmc_bind, mmg_bind, mmcg_bind, mma_bind, mmac_bind, mmag_bind, mmacg_bind) \
    / { \
        macros { \
            SEQUENCE_SIMPLE(mmb_ ## name,   mmb_bind) \
            SEQUENCE_SIMPLE(mmc_ ## name,   mmc_bind) \
            SEQUENCE_SIMPLE(mmg_ ## name,   mmg_bind) \
            SEQUENCE_SIMPLE(mmcg_ ## name,  mmcg_bind) \
            \
            SEQUENCE_SIMPLE(mma_ ## name,   mma_bind) \
            SEQUENCE_SIMPLE(mmac_ ## name,  mmac_bind) \
            SEQUENCE_SIMPLE(mmag_ ## name,  mmag_bind) \
            SEQUENCE_SIMPLE(mmacg_ ## name, mmacg_bind) \
        }; \
    }; \
    / { \
        behaviors { \
            CREATE_MOD_MORPH_GUI(m_gui_ ## name,         &mmb_ ## name,       &mmg_ ## name) \
            CREATE_MOD_MORPH_GUI(m_ctl_gui_ ## name,     &mmc_ ## name,       &mmcg_ ## name) \
            CREATE_MOD_MORPH_GUI(m_alt_gui_ ## name,     &mma_ ## name,       &mmag_ ## name) \
            CREATE_MOD_MORPH_GUI(m_alt_ctl_gui_ ## name, &mmac_ ## name,      &mmacg_ ## name) \
            \
            CREATE_MOD_MORPH_CTL(m_ctl_ ## name,         &m_gui_ ## name,     &m_ctl_gui_ ## name) \
            CREATE_MOD_MORPH_CTL(m_alt_ctl_ ## name,     &m_alt_gui_ ## name, &m_alt_ctl_gui_ ## name) \
            \
            CREATE_MOD_MORPH_ALT(m_alt_ ## name,         &m_ctl_ ## name,     &m_alt_ctl_ ## name) \
        }; \
    }; \
    / { \
        macros { \
            KEY_SEQUENCE_MACRO(m_shift_ ## name,    first_key_c &m_alt_ ## name, 0, 0) \
            KEY_SEQUENCE_MACRO(m_no_shift_ ## name, first_key &m_alt_ ## name,   0, 0) \
        }; \
    }; \
    / { \
        behaviors { \
            CREATE_MOD_MORPH_SFT(mumo_ ## name, &m_no_shift_ ## name, &m_shift_ ## name) \
        }; \
    }; \
    / { \
        macros { \
            KEY_SEQUENCE_MACRO(td_spc_ ## name, &mumo_ ## name &kpds SPACE, 0, 0) \
        }; \
    }; \
    / { \
        behaviors { \
            CREATE_DOUBLE_TAPDANCE(mm_ ## name, &mumo_ ## name, &td_spc_ ## name) \
        }; \
    }; \





CREATE_MULTI_MOD_MORPH_MACRO(t, &kpr_t, &kpr_ct,   &kpr_h,   &kpr_h &kpr_e,   &kpr_e &kpr_r,   &kpr_o &kpr_r,   &kpr_h &kpr_a &kpr_t,   &kpr_h &kpr_i &kpr_s,   &kpr_h &kpr_e &kpr_y,   &kpr_i &kpr_o &kpr_n)

CREATE_MULTI_MOD_MORPH_MACRO(a, &kpr_a, &kpr_ca,   &kpr_t,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_t &kpr_i &kpr_o)
CREATE_MULTI_MOD_MORPH_MACRO(e, &kpr_e, &kpr_ce,   &kpr_r,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_v &kpr_e &kpr_r)
CREATE_MULTI_MOD_MORPH_MACRO(o, &kpr_o, &kpr_co,   &kpr_r,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_u &kpr_l &kpr_d)
CREATE_MULTI_MOD_MORPH_MACRO(i, &kpr_i, &kpr_ci,   &kpr_n,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_g &kpr_h &kpr_t)
CREATE_MULTI_MOD_MORPH_MACRO(u, &kpr_u, &kpr_cu,   &kpr_n,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_s &kpr_e)



//CREATE_MULTI_MOD_MORPH_MACRO(at, A, &kp T, &kp R &kp E, &kp V &kp E, &kp N &kp G)

//CREATE_MULTI_MOD_MORPH_MACRO(th, &kp T &kp H, &kp T &kp H &kp E, &kp T &kp E &kp R, &kp T &kp H &kp A &kp T)
//
//CREATE_MULTI_MOD_MORPH_MACRO(at, &kp A &kp T, &kp A &kp R &kp E, &kp A &kp V &kp E, &kp A &kp N &kp G)
//CREATE_MULTI_MOD_MORPH_MACRO(er, &kp E &kp R, &kp E &kp R &kp E, &kp E &kp V &kp E, &kp E &kp N &kp G)
//CREATE_MULTI_MOD_MORPH_MACRO(or, &kp O &kp R, &kp O &kp R &kp E, &kp O &kp V &kp E, &kp O &kp N &kp G)
//CREATE_MULTI_MOD_MORPH_MACRO(in, &kpr_i &kpr_n,  &kpr_i &kpr_r &kpr_e, &kpr_i &kpr_v &kpr_e, &kpr_i &kpr_n &kpr_g)
//CREATE_MULTI_MOD_MORPH_MACRO(un, &kp U &kp N, &kp U &kp R &kp E, &kp U &kp V &kp E, &kp U &kp N &kp G)

//#define CREATE_MULTI_MOD_MORPH_MACRO(name, mmb_bind, mmc_bind, mmg_bind, mmcg_bind) \
//    / { \
//        macros { \
//            NO_PARAM_SANDWICH(mmb_ ## name,  &none, mmb_bind,  &none) \
//            NO_PARAM_SANDWICH(mmc_ ## name,  &none, mmc_bind,  &none) \
//            NO_PARAM_SANDWICH(mmg_ ## name,  &none, mmg_bind,  &none) \
//            NO_PARAM_SANDWICH(mmcg_ ## name, &none, mmcg_bind, &none) \
//        }; \
//    }; \
//    / { \
//        behaviors { \
//            CREATE_MOD_MORPH_GUI(mcg_ ## name, &mmc_ ## name, &mmcg_ ## name) \
//            CREATE_MOD_MORPH_GUI(mg_ ## name,  &mmb_ ## name, &mmg_ ## name) \
//            \
//            CREATE_MOD_MORPH_CTL(mc_ ## name,  &mg_ ## name,  &mcg_ ## name) \
//        }; \
//    }; \
//    / { \
//        macros { \
//            NO_PARAM_SANDWICH(mod_space_ ## name,      &none,      &mc_ ## name, &kp SPACE) \
//            NO_PARAM_SANDWICH(mod_caps_ ## name,       &sk LSHIFT, &mc_ ## name, &none) \
//            NO_PARAM_SANDWICH(mod_caps_space_ ## name, &sk LSHIFT, &mc_ ## name, &kp SPACE) \
//        }; \
//    }; \
//    / { \
//        behaviors { \
//            CREATE_MOD_MORPH_SFT(mas_ ## name,  &mod_space_ ## name, &mod_caps_space_ ## name) \
//            CREATE_MOD_MORPH_SFT(ms_ ## name,   &mc_ ## name,        &mod_caps_ ## name) \
//            \
//            CREATE_MOD_MORPH_ALT(mumo_ ## name, &ms_ ## name,        &mas_ ## name) \
//        }; \
//    };

