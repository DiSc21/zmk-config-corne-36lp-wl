/*
╭──────────────────────────────────────────────────────────╮
│ @Author:  TheDirkKnight     @Contact:  github.com/DiSc21 │
│ @License: MIT             @copyright: 2024 TheDirkKnight │
│ @Data:    2025/01/04                                     │
╰──────────────────────────────────────────────────────────╯
 ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡆⠀⠀⠀⠀⠀⠀⠀⣆              ⠀⠀⠀⣶⡀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⣿⡇               ⣼⣿⣧
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⡿⣿             ⠀⣰⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠃⣿⡄           ⠀⢠⣿⣿⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣼⣿⡇           ⣰⣿⣿⣿⣿⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿           ⣰⣿⣿⣿⠋⠉⠙⣿⣿⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣼⣿⣿⣿⣿⣿⣿⣿⣿⡏          ⣰⣿⣿⣿⡇⠀⠀⠀⢸⣿⣿⣟⣆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⡻⢿⣿⡿⡟⣿⡿⠟⣛⠁        ⠀⣴⣿⠿⠛⠋⠁⠀⠀⠀⠈⠙⠛⠿⣿⣦
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⡾⠛⠉⠀⠀⠀⠉⠓⠂ ⡀⠀⠐⠛⠁⠀⠀⠀⣸⣿⣦⣄⡀⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁
⠀⠀⠀⠀⠀⠀⢀⣀⣀⣤⣤⣶⣿⣿⣿⣿⣿⣷⣆⠀⠀⠀⠀⠀⠀⢠⡇⠀⠀⠀⠀⠀⠀⠀⠈⣻⣿⣿⣿⣷⣶⣤⣤⣤⣄⣀
⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀ ⣀⣀  ⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡄
⠀⠀⡾⣿⣿⣿⣿⠿⠋⢁⣿⣿⣿⣿⣿⣿⣟⣥⣶⢿⡛⠉⠀⠀⠈⠀⠀⠁⠀⠀⠀⠈⢙⡻⢷⣿⣿⣿⣿⣿⣿⣿⡟⠿⠿⣿⣿⣿⣿
⠀⠀⠀⣿⣿⠟⠁⠀⢠⣿⣿⣿⣿⣿⣿⡿⢟⣭⣶⣿⣷⣄⠀⠀⠀⣄⣀⡄⠀⠀⢀⣴⣿⣿⣷⣝⡻⣿⣿⣿⣿⣿⣿⣦⡀⠀⠉⠛⢿
⠀⠀⠀⠿⠁⠀⠀⠀⠋⠁⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣮⡻⣿⣿⣿⠯⠉⠙
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠁⠽⠋⠠⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠷⠌⠻⠟
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠿⠿⠿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠟⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠋
╭──────────────────────────────────────────────────────────╮
│ @brief: ZMK devicetree file for led-layer-indicators.    │
│                                                          │
│ @depends:                                                │
│ - shared_defs.dtsi (key positions)                       │
│ - shared_macros.dtsi (some aux macros).                  │
╰──────────────────────────────────────────────────────────╯
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "shared_defs.dtsi"
#include "shared_macros.dtsi"
#include "shared_nomod_morphs.dtsi"

///
/// @brief macro for the creation tab-dance-macros w|wo trailing space
///
/// @param name: name of the created mod-morph
/// @param cmd_binding: the binding (without trailing SPACE)
///
#define CREATE_TAPDANCE_SPACE_APPEND(name, cmd_bind) \
    KEY_SEQUENCE_MACRO_SIMPLE(aspc_ ## name, cmd_bind &kp SPACE) \
    KEY_SEQUENCE_MACRO_SIMPLE(nspc_ ## name, cmd_bind) \
    \
    CREATE_DOUBLE_TAPDANCE(name, &nspc_ ## name, &aspc_ ## name)

///
/// @brief macro for the creation of append-space-tabdance nested in shift-mod-morph
///
/// @param name: name of the created mod-morph
/// @param cmd_binding: the binding (without trailing SPACE)
///
#define CREATE_MOD_MORPH_SFT_WITH_TABDANCE_SPACE(name, cmd_bind) \
    CREATE_TAPDANCE_SPACE_APPEND(mmb_ ## name,     &kpr_ ## name cmd_bind) \
    CREATE_TAPDANCE_SPACE_APPEND(mmb_sft_ ## name, &kpr_c ## name cmd_bind) \
    \
    CREATE_MOD_MORPH_SFT(m_sft_b_ ## name, &td_mmb_ ## name, &td_mmb_sft_ ## name) \

///
/// @brief macro for the creation of nested mod-morphes
///
/// @param name: postfix of the created mod-morph
/// @param mmb_bind: unmodified base binding
/// @param mmc_bind: CTRL binding
/// @param mmg_bind: GUI binding
/// @param mmcg_bind: combined CTRL+GUI binding
/// @param mma_bind: ALT binding
/// @param mmac_bind: ALT+CTRL binding
/// @param mmag_bind: ALT+GUI binding
/// @param mmacg_bind: combined ALT+CTRL+GUI binding
///
/// @note this macro creates a two-dimensional nested multi-mod-morph.
/// TABDANCE+SHIFT modify the bindings by appending space (TABDANCE) and capital first letter (SHIFT)
/// ALT+CTRL+GUI alternate the base binding defined by params mmb/mmc/mmg/mma_bind/...
///
/// @note behaviors are chained bottom up, i.e. when reading this it might make sense to read this
/// preprocesser directive reverse from the bottom to the top.
///
/// @note initially SHIFT was the first modifier processed. However, it felt like having zmk-macro-behaviors
/// called/processed before all mod-morphs were processed gave false-negatives (failed detections) if the modifier
/// keys where released before those macros had finished. I tried to solve this by
/// - only using the tabdance-append-space macro with ZERO wait-ms and tap-ms
/// - creating a delayed-key-tap behavior used only for appending space to circumvent timing issues
/// - not using zmk-macro-behaviors before applying mod-morphs
///
/// @usage 'mumo_##name' for multigram-mod-morph only, i.e. without tapdance-space-append
/// @usage 'td_mm_##name' for multigram-mod-morph with tapdance-space-append
///
#define CREATE_MULTI_MOD_MORPH_MACRO(name, mmb_bind, mmc_bind, mmg_bind, mmcg_bind, mma_bind, mmac_bind, mmag_bind, mmacg_bind) \
    / { \
        behaviors { \
            CREATE_TAPDANCE_SPACE_APPEND_WITH_TABDANCE_SPACE(name, mmb_bind) \
            CREATE_TAPDANCE_SPACE_APPEND_WITH_TABDANCE_SPACE(name, mmc_bind) \
            CREATE_TAPDANCE_SPACE_APPEND_WITH_TABDANCE_SPACE(name, mmg_bind) \
            CREATE_TAPDANCE_SPACE_APPEND_WITH_TABDANCE_SPACE(name, mmcg_bind) \
            CREATE_TAPDANCE_SPACE_APPEND_WITH_TABDANCE_SPACE(name, mma_bind) \
            CREATE_TAPDANCE_SPACE_APPEND_WITH_TABDANCE_SPACE(name, mmac_bind) \
            CREATE_TAPDANCE_SPACE_APPEND_WITH_TABDANCE_SPACE(name, mmag_bind) \
            CREATE_TAPDANCE_SPACE_APPEND_WITH_TABDANCE_SPACE(name, mmacg_bind) \
            \
            \
            CREATE_MOD_MORPH_GUI(m_gui_ ## name,         &td_m_sft_b_ ## name,   &td_m_sft_g_ ## name) \
            CREATE_MOD_MORPH_GUI(m_ctl_gui_ ## name,     &td_m_sft_c_ ## name,   &td_m_sft_cg_ ## name) \
            CREATE_MOD_MORPH_GUI(m_alt_gui_ ## name,     &td_m_sft_a_ ## name,   &td_m_sft_ag_ ## name) \
            CREATE_MOD_MORPH_GUI(m_alt_ctl_gui_ ## name, &td_m_sft_ac_ ## name,  &td_m_sft_acg_ ## name) \
            \
            CREATE_MOD_MORPH_CTL(m_ctl_ ## name,         &m_gui_ ## name,     &m_ctl_gui_ ## name) \
            CREATE_MOD_MORPH_CTL(m_alt_ctl_ ## name,     &m_alt_gui_ ## name, &m_alt_ctl_gui_ ## name) \
            \
            CREATE_MOD_MORPH_ALT(mumo_ ## name,          &m_ctl_ ## name,     &m_alt_ctl_ ## name) \
        }; \
    }; \


///
/// @brief non-vocal multigrams only share tabdance-space and Caps-Shift logic.
/// - Tabdance: append space
/// - SHIFT: first letter capital
///       ___________________________________________________________________________________
///      | <no-mods> |  CTRL |  GUI | CTRL+GUI |   ALT |  ALT+CTRL |  ALT+GUI | ALT+CTRL+GUI |
/// .====|===========|=======|======|==========|=======|===========|==========|==============|
/// | F: |   for     |    ft |   fr |     -    |  from |     -     |      -   |        -     |
/// | M: |   ment    |    me |   my |   must   |  many |   much    |    more  |      most    |
/// | R: |   re      |    rt |   rg |     -    |   rb  |     -     |      -   |        -     |
/// | T: |   th      |   the |  ter |    tor   |  that |   this    |    they  |      tion    |
/// | W: |   wh      | would | will |   with   | which |    way    |    when  |      want    |
/// |____|___________|_______|______|__________|_______|___________|__________|______________|
///
CREATE_MULTI_MOD_MORPH_MACRO(f, &kpr_o &kpr_r,          &kpr_t,                        &kpr_r,                 &none,                  &kpr_r &kpr_o &kpr_m,          &none,                  &none,                  &none)
CREATE_MULTI_MOD_MORPH_MACRO(m, &kpr_e &kpr_n &kpr_t,   &kpr_e,                        &kpr_y,                 &kpr_u &kpr_s &kpr_t,   &kpr_a &kpr_n &kpr_y,          &kpr_u &kpr_c &kpr_h,   &kpr_o &kpr_r &kpr_e,   &kpr_o &kpr_s &kpr_t)
CREATE_MULTI_MOD_MORPH_MACRO(r, &kpr_e,                 &kpr_t,                        &kpr_g,                 &none,                  &kpr_b,                        &none,                  &none,                  &none)
CREATE_MULTI_MOD_MORPH_MACRO(t, &kpr_h,                 &kpr_h &kpr_e,                 &kpr_e &kpr_r,          &kpr_o &kpr_r,          &kpr_h &kpr_a &kpr_t,          &kpr_h &kpr_i &kpr_s,   &kpr_h &kpr_e &kpr_y,   &kpr_i &kpr_o &kpr_n)
CREATE_MULTI_MOD_MORPH_MACRO(w, &kpr_h,                 &kpr_o &kpr_u &kpr_l &kpr_d,   &kpr_i &kpr_l &kpr_l,   &kpr_i &kpr_t &kpr_h,   &kpr_h &kpr_i &kpr_c &kpr_h,   &kpr_a &kpr_y,          &kpr_h &kpr_e &kpr_n,   &kpr_a &kpr_n &kpr_t)

///
/// @brief vocal multigrams share some common schemata:
/// - Tabdance: append space
/// - SHIFT: first letter capital
///       _________________________________________________________________________________
///      | <no-mods> | CTRL |  GUI | CTRL+GUI |  ALT |  ALT+CTRL |  ALT+GUI | ALT+CTRL+GUI |
///      |===========|======|======|==========|======|===========|==========|==============|
///      |   VAR     | + re | + ve |   + ng   | + nd |   + ck    |    + th  |      VAR     |
/// .----|-----------|------|------|----------|------|-----------|----------|--------------|
/// | A: |   at      |  are |  ave |    ang   |  and |    ack    |     ath  |     ation    |
/// | E: |   er      |  ere |  eve |    eng   |  end |    eck    |     eth  |      ever    |
/// | O: |   or      |  ore |  ove |    ong   |  ond |    ock    |     oth  |     ought    |
/// | I: |   in      |  ire |  ive |    ing   |  ind |    ick    |     ith  |      ight    |
/// | U: |   un      |  ure |  uve |    ung   |  und |    uck    |     uth  |       urg    |
/// |____|___________|______|______|__________|______|___________|__________|______________|
///
CREATE_MULTI_MOD_MORPH_MACRO(a, &kpr_t,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_t &kpr_i &kpr_o &kpr_n)
CREATE_MULTI_MOD_MORPH_MACRO(o, &kpr_r,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_u &kpr_g &kpr_h &kpr_t)
CREATE_MULTI_MOD_MORPH_MACRO(e, &kpr_r,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_v &kpr_e &kpr_r)
CREATE_MULTI_MOD_MORPH_MACRO(i, &kpr_n,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_g &kpr_h &kpr_t)
CREATE_MULTI_MOD_MORPH_MACRO(u, &kpr_s,   &kpr_r &kpr_e,   &kpr_v &kpr_e,   &kpr_n &kpr_g,   &kpr_n &kpr_d,   &kpr_c &kpr_k,   &kpr_t &kpr_h,   &kpr_r &kpr_g)


